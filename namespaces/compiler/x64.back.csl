5
// Intel - InstructionSet-A-M-253666.pdf - section 2.1 :
// -----------------------------------------------------------------------
// instuction format ( in bytes )
// prefixes  opcode  modRm   sib        disp   immediate
//  0 - 4    1 - 3   0 - 1  0 - 1      0,1,4    0,1,4      -- number of bytes
// -----------------------------------------------------------------------
//   modRm byte ( bits )  mod 0 : no disp ;; mod 1 : 1 byte disp : mod 2 : 4 byte disp ;; mod 3 : just reg value
//    mod     reg      rm
//   7 - 6   5 - 3   2 - 0 
//                   rm  4 = b100 => sib instead of ESP
// -----------------------------------------------------------------------
//  reg/rm codes :
//  EAX 0, R9D 1, EDX 2, EBX 3, ESP 4, EBP 5, ESI 6, EDI 7
// -----------------------------------------------------------------------
//  bit positions encoding :  ...|7|6|5|4|3|2|1|0|  but nb. intel is little endian
// -----------------------------------------------------------------------
//  opCode direction bit 'd' is bit position 1 : 1 => rm/sib to reg ; 0 => reg to rm/sib -- for some instructions
//  sign extend bit 's' is bit position 1 for some instructions
//  operand size bit 'w' is bit position 0 for some instructions
// -----------------------------------------------------------------------
//       sib byte ( bits ) with rm 4 - b100
//    scale  index   base
//    7 - 6  5 - 3  2 - 0
//    scale 0 : [index * 1 + base]
//    scale 1 : [index * 2 + base]
//    scale 2 : [index * 4 + base]
//    scale 1 : [index * 4 + base]
// -----------------------------------------------------------------------
// intel syntax : opcode dst, src
// att syntax   : opcode src, dst

// note : x86-32 instruction format : || prefixes : 0-4 bytes | opCode : 1-3 bytes | mod : 0 - 1 byte | sib : 0 - 1 byte | disp : 0-4 bytes | immediate : 0-4 bytes ||
// note : intex syntax  : instruction dst, src
//        att   syntax  : instruction src, dst
// note : rm : reg memory - the register which contains the memory address in mod instructions

// csl uses intel syntax convention
//logOn

C_Off
: apause ; // pause ;
#if 0 // debug
C 
: sp stack pause ; sp
User
: sp stack pause ; sp
#else
C 
: sp ; //stack pause ; sp
User
: sp ; //stack pause ; sp
#endif 
sp
Compiler Compiling C Asm
: asmBegin compileModeOn asmModeOn sourceCodeInit sourceCodeOn token wordNew begin ' {| find compileWord ; immediate  // nb : asm mode is interpreted
: asmEnd ' {| find compileWord semi asmModeOff ; immediate
'asm: 'asmBegin find alias
';asm 'asmEnd find alias 
//' :asm find winfo //sp
//' asm; find winfo //sp
: ;; ' ; find compileWord ' _prefix find compileWord ; immediate
// C : ;; ' ;; find compileWord ; immediate
//' ;; find wdiss // sp
'X64 namespace
X64
"namespaces/compiler/asmConstants.csl" include

hex
Logic Bits Combinators X64 
'x64_dbg 1 const  
'DBI var //1 const
: dbiOn DBI 1  = ;
: dbiOff DBI 0 = ;
#define x64_dbg 1
#if x64_dbg    
dscOn 
//postifx verbosity 3 =
#endif    
//scOn
: abs( n ) { n > 0 } { return n } { return ( 0 n - ) } ifElse ; 
c_syntaxOn
Logic Combinators X64 C Bits

int
CalculateModRegardingDisplacement ( mod,  disp | rmod ) // mod/rmod avoid name class with 'mod' function
{
    // mod reg r/m bits :
    //  00 000 000
    if ( mod != REG )
    {
        if ( disp == 0 ) rmod = 0 ;
        else if ( disp <= 0xff ) rmod = 1 ; 
        else rmod = 2 ;  
    }
    else rmod = mod ;
    return rmod ;
} prefix
//'CalculateModRegardingDisplacement find wdiss //apause

Bits 
int
CalculateModRmByte ( mod, reg, rm, sib, disp )
{
    mod = CalculateModRegardingDisplacement ( mod, disp ) ;
    if ( ( mod < 3 ) && ( rm == 4 ) ) 
    //if ( ( mod < 3 ) && ( rm == 4 ) ) //|| ( ( rm == 5 ) && ( disp == 0 ) ) ) )
    //if ( ( mod < 3 ) && ( ( ( rm == 4 ) && ( sib == 0 ) ) || ( ( rm == 5 ) && ( disp == 0 ) ) ) )
    {
        ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ;
        ps ( "\n cf. InstructionSet-A-M-253666.pdf Table 2-2\n\n" ) ;
        pause ;
        quit ;
    }
    if ( sib )
    {
        rm = 4 ; // from intel mod tables
        reg = 0 ;
    }
    uint8 modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ; // only use 3 bits of reg/rm
    return modRm ;
} prefix

//'CalculateModRmByte find wdiss apause 
//-----------------------------------------------------------------------
//   modRm byte ( bits )  mod 0 : no disp ; mod 1 : 1 byte disp : mod 2 : 4 byte disp ; mod 3 : just reg value
//    mod     reg      rm
//   7 - 6   5 - 3   2 - 0
//-----------------------------------------------------------------------
//  reg/rm values :
//  EAX 0, ECX 1, EDX 2, ECX 3, ESP 4, EBP 5, ESI 6, EDI 7
//-----------------------------------------------------------------------


// some checks of the internal consistency of the instruction bits

// instruction letter codes : I - immediate data ; 32 : 32 bit , 8 : 8 bit ; EAX, DSP : registers
// we could have a mod of 0 so the modRmImmDispFlag is necessary
// operandSize : specific size of immediate data - BYTE or WORD
// SIB : scale, index, base addressing byte
void
_Compile_ImmOrDispData ( immOrDisp,  immSize, forceFlag )
{
    // the opcode probably is all that needs to be adjusted for this to not be necessary    
    // to not compile an imm when imm is a parameter, set isize == 0 and imm == 0
    if ( immSize > 0 )
    {
        if ( immSize == BYTE ) compileByte (immOrDisp)  ; 
        else if ( immSize == 4 ) compileInt32 (immOrDisp)  ; 
        else if ( immSize == CELL ) compileInt64 (immOrDisp) ; 
    }
    else // with operandSize == 0 let the compiler use the minimal size ; nb. can't be imm == 0
    {
        if ( immOrDisp >= 0x100000000 ) compileInt64 (immOrDisp)  ;
        else 
        {
            if ( immOrDisp >= 0x100 ) compileInt32 (immOrDisp)  ;
            else if ( immOrDisp || forceFlag ) compileByte (immOrDisp)  ;
        }
    }
} prefix
'_Compile_ImmOrDispData find wdiss //pause

// Intel - InstructionSet-A-M-253666.pdf - section 2.1 :
//-----------------------------------------------------------------------
// instuction format ( number of bytes )
// prefixes  opcode  modRm   sib       disp    immediate
//  0 - 4    1 - 3   0 - 1  0 - 1    0,1,2,4    0,1,2,4      -- number of bytes
//-----------------------------------------------------------------------
//   modRm byte ( bits )  mod 0 : no disp ; mod 1 : 1 byte disp : mod 2 : 4 byte disp ; mod 3 : just reg value
//    mod     reg      rm
//   7 - 6   5 - 3   2 -- 0 
//-----------------------------------------------------------------------
//  reg/rm values :
//  EAX 0, ECX 1, EDX 2, ECX 3, ESP 4, EBP 5, ESI 6, EDI 7
//-----------------------------------------------------------------------
//    sib byte ( bits ) :
//    scale  index   base
//    7 - 6  5 - 3  2 - 0
//-----------------------------------------------------------------------

// REX prefix ?
// controlFlags : bits ::  4      3       2     1      0         
//                       rex    imm    disp   sib    modRm      
//                      rex=16 imm=8, disp=4 sib=2  mod/Rm=1
//                      REX_B  IMM_B  DISP_B SIB_B   MODRM_B

void
_Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize )
{
#if DBI
    int nbytes, _here  ;
    _here = Here ;
#endif
    if ( rex ) compileByte ( rex ) ; 
    if ( opCode0 ) compileByte ( opCode0 ) ; 
    if ( opCode1 ) compileByte ( opCode1 ) ; 
    if ( controlFlags Bits.& MODRM_B ) compileByte ( modRm ) ;
    if ( sib && ( controlFlags Bits.& SIB_B ) ) compileByte ( sib ) ;
    if ( disp && ( controlFlags Bits.& DISP_B ) ) _Compile_ImmOrDispData ( disp, dispSize, ( controlFlags Bits.& DISP_B ) ) ;
    if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmOrDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;
#if DBI
    nbytes = Here - _here ; 
    nl ; location () ;
    printf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ; 
    dis ( _here, nbytes ) ; nl ; //pause () ; nl ; nl ; 
#endif
} prefix
'_Compile_Write_Instruction_X64 find wdiss //pause
#if 0
int 
CalculateRex ( reg rm rex_w_flag )
{
    byte rex = ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ;
    if ( rex ) rex |= 0x40 ;
    return rex ;
} prefix // prefix is not automatic with c syntax so they can be used like rpn words
#else
int
_CalculateRex ( Boolean reg, Boolean rm, Boolean sib, int64 operandSize )
{
    //  0100    WRXB
    Boolean rex = 0 ;
    if ( operandSize > INT32_SIZE )
    {
        //rex += 8 ; // 1 << 3 ;
        byte rex = 0x48 ;
        if ( reg > 0x7 ) rex += 4 ; // (1 << 2) ;
        if ( sib > 0x7 ) rex += 2 ; // 1 << 1 ; // needs to be fixed!! respecting sib first
        if ( rm > 0x7 ) rex += 1 ;
    }
    return rex ;
} prefix
#endif
//'CalculateRex find wdiss pause
//verbosity = 2 ;
#if 0
void
Compile_CalculateWrite_Instruction_X64 ( code0, code1, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize )
{
    byte rex = CalculateRex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ) ) ;
    byte modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;
    _Compile_Write_Instruction_X64 ( rex, code0, code1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ;
} prefix
#else
void
Compile_CalculateWrite_Instruction_X64 ( uint8 opCode0, uint8 opCode1, Boolean mod, uint8 reg, Boolean rm, uint16 controlFlags, Boolean sib, uint64 disp, uint8 dispSize, uint64 imm, uint8 immSize )
{
    Boolean rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags & REX_W ), ( controlFlags & REX_B ) ) ;
    uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;
    _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ;
} prefix
#endif

'Compile_CalculateWrite_Instruction_X64 find wdiss //pause
#if 1

void
Compile_Move ( direction, mod, reg, rm, operandSize, sib, disp, dispSize, imm, immSize )
{
    uint8 opCode ; uint16 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) | MODRM_B ;
    if ( imm || immSize )
    {
        reg = 0 ;
        if ( immSize == 1 ) opCode = 0xb0 ;
        else opCode = 0xb8 ;
        opCode += ( rm Bits.& 7 ) ;
        controlFlags |= IMM_B ;
    }
    else
    {
        opCode = 0x88 ;
        if ( direction == REG ) opCode |= 2 ; // 0x8b ; // 0x89 |= 2 ; // d : direction bit = 'bit 1' : 0 == dest is mem ; 1 == dest is reg
        if ( operandSize > 1 ) opCode += 1 ; //nb. if using rex then we cannot use AH, BH, CH, DH per Intel instruction manual
        if ( operandSize == 8 ) controlFlags |= REX_W ;
        if ( ! mod )
        {
            if ( disp == 0 ) mod = 0 ;
            else if ( abs (disp) <= 0x7f ) mod = 1 ;
            else if ( abs (disp) >= 0x100 ) mod = 2 ;
        }
        controlFlags |= REX_B ;
    }
    Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ;
} prefix
#else
// intel syntax : opcode dst, src
// mov reg to mem or mem to reg
// note the order of the operands match intel syntax with dst always before src

// the basic move instruction
// mov reg to mem or mem to reg ( but not reg to reg or move immediate )
// note this function uses the bit order of operands in the mod byte : (mod) reg r/m
// not the intel syntax as with _CompileMoveRegToMem _CompileMoveMemToReg
// the 'rmReg' parameter must always refer to a memory location; 'reg' refers to the register, either to or from which we move mem

// controlFlags : bits ::  3       2     1      0         D D - - I D S M
//                       imm    disp   sib    modRm      mod               (mod) only in move insn
//                     imm=8, disp=4 sib=2  mod/Rm=1

// size refers to size of the operand or immediate
// mod :: TO_REG == 3 : TO_MEM == 0,1,2 depending on disp size ; 0 == no disp ; 1 == 8 bit disp ; 2 == 32 bit disp

void
//Compile_Move ( direction, mod, reg, rm, operandSize, sib, disp, dispSize, imm, immSize )
Compile_Move ( uint8 direction, uint8 mod, uint8 reg, uint8 rm, uint8 operandSize, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize )
{
    uint8 opCode0 = 0, opCode, modRm ;
    uint16 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;
    if ( ! operandSize ) operandSize = 8 ;
    if ( imm || immSize )
    {
        reg = 0 ; // the rm is the destination and this is move immediate
        controlFlags |= IMM_B ;
        if ( immSize < 8 )
        {
            if ( immSize == 1 ) opCode = 0xb0 + rm ;
            else if ( immSize == 2 )
            {
                opCode0 = 0x66 ;
                opCode = 0xb8 | rm ;
                modRm = 0 ;
            }
            else if ( immSize == 4 )
            {
                opCode = 0xb8 | rm ;
                modRm = 0 ;
            }
        }
        else //if ( immSize == 8 ) 
        {
            opCode = 0xb8 ;
            opCode += ( rm Bits.& 7 ) ;
            controlFlags |= ( REX_W ) ;
        }
        //DBI_ON ; 
        // zero out destination
        //Compile_CalculateWrite_Instruction_X64 ( 0, 0xb8 + (rm Bits.& 7), mod, reg, rm, controlFlags, sib, disp, dispSize, 0, CELL ) ;
    }
    else // non immediate
    {
        controlFlags |= ( MODRM_B ) ;
        opCode = 0x88 ;
        if ( operandSize > 1 ) opCode += 1 ; //nb. if using rex then we cannot use AH, BH, CH, DH per Intel instruction manual
        if ( direction == TO_REG ) opCode |= 2 ; // 0x8b ; // 0x89 |= 2 ; // d : direction bit = 'bit 1' : 0 == dest is mem ; 1 == dest is reg
        if ( operandSize == 2 ) opCode0 = 0x66 ; // choose 16 bit operand
        if ( operandSize >= 8 ) controlFlags |= ( REX_W ) ;
        if ( ! mod )
        {
            if ( disp == 0 ) mod = 0 ;
            else if ( disp <= 0xff ) mod = 1 ;
            else if ( disp >= 0x100 ) mod = 2 ;
        }
    }
    Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ;
} prefix
#endif
'Compile_Move find wdiss //pause 

void 
_Compile_Move ( direction mod reg rm disp ) 
{
    Compile_Move ( direction, mod, reg, rm, 8, 0, disp, 0, 0, 0 ) ;
} prefix
//'_Compile_Move find wdiss //pause

//                                    Compile_Move ( direction, mod, reg, rm, operandSize, sib, disp, dispSize, imm, immSize )
void _Compile_Move_DataStackN_ToReg ( reg n ) { Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; d: } prefix 

void
Compile_MoveImm_To_Reg ( Boolean rm, int64 imm, Boolean immSize )
{
    if ( ! immSize ) immSize = 8 ;
    Compile_Move ( 0, mod, 0, rm, 0, 0, 0, 0, imm, immSize ) ; // nb. reg == 0 in a move immediate
} prefix


void
Compile_Move_Reg_To_Rm ( Boolean rm, Boolean reg, int64 disp, byte size )
{
    Compile_Move ( MEM, 0, reg, rm, size, 0, disp, 0, 0, 0 ) ;
} prefix

void
Compile_MoveImm ( Boolean mod, Boolean rm, int64 disp, int64 imm, Boolean immSize )
{
    if ( ! immSize ) immSize = 8 ;
    if ( ( mod == MEM ) && ( ( immSize >= 8 ) || ( imm > 0xffffffff ) ) )
    {
        // there is no x64 instruction to move imm64 to mem directly
        uint8 thruReg = THRU_REG ;
        Compile_MoveImm_To_Reg ( thruReg, imm, immSize ) ; // thruReg : R8D : needs to be a parameter
        Compile_Move_Reg_To_Rm ( rm, thruReg, disp, immSize ) ;
    }
    else Compile_Move ( 0, mod, 0, rm, 0, 0, 0, 0, imm, immSize ) ; // nb. reg == 0 in a move immediate
} prefix

void
_Compile_X_Group1 ( Boolean code, Boolean toRegOrMem, Boolean mod, Boolean reg, Boolean rm, Boolean sib, int64 disp, Boolean operandSize )
{
    int64 opCode = code << 3, controlFlags = DISP_B | MODRM_B ;
    if ( operandSize > BYTE ) opCode |= 1 ;
    if ( toRegOrMem == TO_REG ) opCode |= 2 ;
    // we need to be able to set the size so we can know how big the instruction will be in eg. CompileVariable
    // otherwise it could be optimally deduced but let caller control by keeping operandSize parameter
    // some times we need cell_t where bytes would work
    //Compiler_WordStack_SCHCPUSCA ( 0, 1 ) ;
    //Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, reg, rm, DISP_B | REX_W | MODRM_B, sib, disp, 0, 0, osize ) ;
    if ( operandSize < 8 )
    {
        int64 opCode0 ;
        if ( operandSize == 1 ) opCode |= rm ;
        else if ( operandSize == 2 )
        {
            opCode0 = 0x66 ;
            opCode |= rm ;
            //modRm = 0 ;
        }
        else if ( operandSize == 4 )
        {
            opCode |= rm ;
            //modRm = 0 ;
        }
        Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, 0, 0, operandSize ) ;
    }
    else //if ( osize == 8 ) 
    {
        Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, reg, rm, controlFlags, sib, disp, 0, 0, operandSize ) ;
    }
}

void
_Compile_X_Group1_Reg_To_Reg ( Boolean code, Boolean dstReg, int64 srcReg )
{
    _Compile_X_Group1 ( code, TO_REG, REG, srcReg, dstReg, 0, 0, CELL ) ;
} prefix

// group1 : ADD OR ADC SBB AND_OPCODE SUB XOR CMP : with immediate data
void
_Compile_X_Group1_Immediate ( Boolean code, Boolean mod, Boolean rm, int64 disp, uint64 imm, Boolean iSize )
{
    // 0x80 is the base opCode for this group of instructions but 0x80 is an alias for 0x82
    // we always sign extend so opCodes 0x80 and 0x82 are not being used
    // 1000 00sw 
    int64 opCode = 0x80 ;
    if ( ( ( iSize > 4 ) || ( imm >= 0x100000000 ) ) ) //&& disp )
    {
        //_DBI_ON ;
        // x64 has no insn to do a group1_op with imm int64 to mem directly so ...
        // first move to a reg then from that reg group1Op to mem location
        if ( rm != DSP ) //! disp )
        {
            Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;
            //_Compile_X_Group1_Reg_To_Reg ( code, ACC, OREG ) ;
            _Compile_X_Group1_Reg_To_Reg ( code, rm, THRU_REG ) ;
        }
        else
        {
            Compile_MoveImm_To_Reg ( ACC, imm, iSize ) ;
            _Compile_X_Group1 ( code, REG, MEM, ACC, rm, 0, disp, CELL ) ;
        }
        //DBI_OFF ;
        return ;
    }
    else if ( ( iSize > BYTE ) || (abs ( imm ) >= 0x7f ) ) //( imm >= 0x100 ) )
    {
        opCode |= 1 ;
    }
    else if ( ( iSize <= BYTE ) || (abs ( imm ) < 0x100 ) ) //( imm < 0x100 ) ) 
        opCode |= 3 ;
    // we need to be able to set the size so we can know how big the instruction will be in eg. CompileVariable
    // otherwise it could be optimally deduced but let caller control by keeping operandSize parameter
    // some times we need cell_t where bytes would work
    //_Compile_InstructionX86 ( int8 opCode, int8 mod, int8 reg, int8 rm, int8 controlFlags, int8 sib, int64 disp, int8 dispSize, int64 imm, int8 immSize )
    //DBI_ON ;
    Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, REX_W | MODRM_B | IMM_B | DISP_B, 0, disp, 0, imm, iSize ) ;
    //DBI_OFF ;
} prefix

pwi _Compile_X_Group1_Immediate  //pause () ;

void
_Compile_Group5 ( code, mod, rm, sib, disp, size )
{
    //Compile_CalculateWrite_Instruction_X64 ( 0, 0xff, mod, code, rm, REX_B | MODRM_B | DISP_B, sib, disp, size, 0, 0 ) ;
    Compile_CalculateWrite_Instruction_X64 ( 0, 0xff, mod, code, rm, (REX_B | MODRM_B | DISP_B), sib, disp, size, 0, 0 ) ;
} prefix

void
_Compile_CallThruReg ( reg )
{
    _Compile_Group5 ( CALL, REG, reg, 0, 0, 0 ) ;
} prefix

//                               _Compile_Group1_Immediate ( code mod rm disp imm immSize ) //controlFlags )
void _Compile_SUBI_DSP ( imm ) 
{ 
    _Compile_X_Group1_Immediate ( SUB, REG, DSP, 0, imm, 1 ) ; 
} prefix

void
_Compile_Test ( mod, reg, rm, controlFlags, disp, imm )
{
    Compile_CalculateWrite_Instruction_X64 ( 0, 0xf7, mod, reg, rm, REX_B | MODRM_B | controlFlags, 0, disp, 0, imm, 0 ) ; //??
} prefix

void
_Compile_MoveReg_To_Rm ( dstRmReg, srcReg, rmRegDisp )
{
//  Compile_Move ( direction, mod, reg, rm, operandSize, sib, disp, dispSize, imm, immSize )
    Compile_Move ( MEM, 0, srcReg, dstRmReg, 8, 0, rmRegDisp, 0, 0, 0 ) ;
} prefix

void
_Compile_MoveReg_To_StackN ( stackReg, index, reg )
{
    _Compile_MoveReg_To_Rm ( stackReg, reg, index * CELL ) ;
} prefix

void
_Compile_TESTreg_Toreg ( dstReg, srcReg )
{
    //_Compile_Op_Specialreg_Toreg ( TEST_R_TO_R, dstReg, srcReg ) ;
    Compile_CalculateWrite_Instruction_X64 ( 0, 0x85, 3, srcReg, dstReg, REX_B | MODRM_B, 0, 0, 0, 0, 0 ) ;

} prefix

#define Compile_INC( mod, rm, sib, disp ) _Compile_Group5 ( INC, mod, rm, sib, disp, 0  )
#define Compile_DEC( mod, rm, sib, disp ) _Compile_Group5 ( DEC, mod, rm, sib, disp, 0  )
c_syntaxOff
infixOn
C X64
sp
C_Syntax
: _Compile_Stack_PopToReg ( reg ) 
    _Compile_Move_DataStackN_ToReg ( reg, 0 ) // 4d8b06                  mov r8, [r14]
    //"\nshould show :     4d8b06                  mov r8, [r14]" ps
    _Compile_SUBI_DSP ( CELL )                   // 4983ee08                sub r14, 0x8
    //"\nshould show :     4983ee08                sub r14, 0x8" ps
;; 
sp
'_Compile_Stack_PopToReg find wdiss //pause
sp
C X64
#if x64_dbg
Combinators

sp
asm: iax
    d: _Compile_Stack_PopToReg ( R8D )          //4d8b06                  mov r8, [r14]       
    _Compile_CallThruReg ( R8D )             //4983ee08                sub r14, 0x8
                                             //49ffd0                  call r8  
                                             //c3                      ret      
;asm

' iax find wdiss sp 

: _Compile_Test_Imm (  mod, rm, disp, imm )
    _Compile_Test ( mod @, rm @, IMM_B, disp @, imm @ )
;;

: _Compile_IncDecreg ( op, reg )
    //_Compile_Group5 ( op @, REG, reg @, 0, 0, 0  )
    Compile_CalculateWrite_Instruction_X64 ( 0, 0xff, REG, op @, reg @, REX_B | MODRM_B, 0, 0, 0, 0, 0 ) 
;;

: _Compile_MoveTOS_To_R8D () _Compile_Move_DataStackN_ToReg ( R8D, 0 ) ;; 

: _Compile_ADDI_DSP ( imm ) _Compile_X_Group1_Immediate ( ADD, REG, DSP, 0, imm @, 1 ) ;; 

: _Compile_CMPreg_IMM ( reg, imm, isize ) _Compile_X_Group1_Immediate ( CMP, REG, reg @, 0, imm @, isize @ ) ;; 

: Compile_Stack_Push_R8D ()
    _Compile_ADDI_DSP ( CELL ) 
    _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) 
;; 

Interpreter User 
: qeval
    stk iax
;
' qeval find wdiss 
sp

asm: stest
    _Compile_MoveTOS_To_R8D ( ) 
    _Compile_Move_DataStackN_ToReg ( R8D, 0 ) 
    Compile_Stack_Push_R8D ( ) 
    _Compile_SUBI_DSP ( CELL ) 
;asm
sp
' stest find wdiss //pause
sp
"\nthis is some purposefully funky code for testing\n" ps

s stest sp 
nl "x64 test" ps "ok" ' dup find xt@ iax ' ps find xt@ iax "ok" "error" assert1s sp //pause
#endif
sp
Stack
asm: ndup
    _Compile_MoveTOS_To_R8D ( )
    _Compile_SUBI_DSP ( CELL ) 
    _Compile_Move_DataStackN_ToReg ( R9D, 0 )
    "start" label 
    _Compile_TESTreg_Toreg ( R8D, R8D )
    "end" 0 EQ jcc
    _Compile_ADDI_DSP ( CELL ) 
    _Compile_MoveReg_To_StackN ( DSP, 0, R9D ) 
    _Compile_IncDecreg ( DEC, R8D ) 
    "start" goto
    "end" label // above jcc to Here
;asm

' ndup find wdiss sp 
s 7 7 ndup s 8 ndrop s
c_syntaxOn
// following intel conventions in the naming : insn dst, src
// move mem to reg 
void
MOV8rm ( reg, ptr, disp ) // 8 bit disp
{
    //_Compile_Move ( direction mod reg rm disp ) 
    _Compile_Move ( REG, MEM, reg, ptr, disp ) ;
}
nprefix (3) ;
// move mem to reg : 32 bit offset
void
MOV32rm ( reg, ptr, disp ) // 32 bit disp
{
    // _Compile_Move ( direction mod reg rm disp ) 
    _Compile_Move ( REG, MEM32, reg, ptr, disp ) ;
}
nprefix (3) ;
void
MOVmr ( ptr, disp, reg ) 
{
    // _Compile_Move ( direction mod reg rm disp ) 
    _Compile_Move ( MEM, MEM, reg, ptr, disp ) ;
}
nprefix (3) ;
sp
// move reg to reg
void
MOVrr ( dstReg, srcReg )
{
    // _Compile_Move ( direction mod reg rm disp | opCode ) 
    _Compile_Move ( REG, REG, dstReg, srcReg, 0 ) ;
}
nprefix (2) ;
c_syntaxOff
sp
C_Syntax Asm 
asm: testAsm
    MOVrr RDX RAX 
    MOVrr RAX RBX 
    MOVrr RBX RAX 
    MOVrr RAX RDX 
;asm
testAsm
pwi testAsm 
sp 
2 + 7 assertStkChk // stack checking
//logOff
//stack pause
    